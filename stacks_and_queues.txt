1. What is the main difference between a stack and a queue?

A: Stack operates as last in, first out and a queue operates as first in, first out. 

2. What are the similarities between stacks and queues?

A: They both support system functions, allow us to rank tasks, and set an order of operations. Also, both of these structures are only working with things at the start or end of the list. 

3. Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?

A: UNDO/REDO would both be a stack operation because we want to deal with the most recent change in either case => LIFO.

4. Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".

A:
Plan:

FUNCTION REVERSE(original)
  INIT a new stack
  FOR each character in original
    CALL stack.push WITH character
  END FOR
  INIT reversed to empty string
  WHILE stack is not empty
    CALL stack.pop RETURNING character
    APPEND character to reversed
  END WHILE
  RETURN reversed
END FUNCTION

JavaScript:

function reverseString(word){
	var letters = []
	for(let i=0; i<word.length; i++){
		letters.push(word[i]);
	}
	var reverseWord = '';
	for(let i=0; i<word.length; i++){
		reverseWord += letters.pop();
	}
	return reverseWord;
}

5. Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.

A: 

let queue = [1,2,3,4,5];
let newQueue = [];
let deletedEntry = '';
function popQueue(queue){
  for(let i=0; i<queue.length; i++){
    if(i == queue.length-1){
      deletedEntry = queue[i];
    }
    else newQueue.push(queue[i]);
  }
  return 'New Queue: ' + newQueue + ' Deleted: ' + deletedEntry;   
}
console.log(popQueue(queue));

6. Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.

A: 

class Queue {
	constructor() {
	this.list = [];
	}

	enqueue(element){
		this.list.push(element);
	}
	
	dequeue(){
		let temp = this.list[0];
		this.list.shift();
		return temp;
	}
}
		