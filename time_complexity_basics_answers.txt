1. What is time complexity and what is its relation to algorithms?

A: Time complexity is a kind of mathematical function that estimates the time it takes a program to run. It is relevant to algorithms because
we want to make them as efficient as possible; having a tool to "quantize" efficiency is very handy in this pursuit.

2. What is runtime?

A: The actual physical time duration of an algorithm; also used synonymously with time complexity.

3. How is the runtime of an algorithm calculated?

A: You add up how many instructions the algorithm requires as a function of input size. You then drop any constants and simplify.
This process is very similar to taking the derivative of a function in calculus, albeit seemingly a little more relaxed on certain details.

4: Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

A:
O(1) Constant Growth Rate
O(log(n)) Logarithmic Growth Rate
O(n) Linear Growth Rate
O(n log(n)) Log-Linear Growth Rate
O(n^2) Quadratic Growth Rate
O(n^x) (x>2) Polynomial Growth Rate
O(2^n) Exponential Growth Rate

5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

A: Searching for a listing in an actual paper phonebook would be O(log(n)) since you are dropping approximately half of the data each time you check a page.

6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search.
FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

A: O(n) Linear

7. Determine the time complexity of the following snippet of code.
FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

A: O(n^2) Quadratic

8. Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

A: O(2^n)

9: Out of the code snippets you just saw, which is the most time efficient?

A: The Linear is the most efficient.
